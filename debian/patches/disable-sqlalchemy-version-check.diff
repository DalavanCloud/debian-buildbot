Description: Allow to use sqlalchemy-migrate > 0.8 for sqlalchemy > 0.9
 Patch allows to use existing versions of python-sqlalchemy and python-migrate
 packages with buildbot.
Origin: upstream, https://github.com/buildbot/buildbot/commit/222361a0e061291c9ba7fd7e6a660c7356ecd218
diff --git a/buildbot/db/enginestrategy.py b/buildbot/db/enginestrategy.py
index d470e96..14a87fb 100644
--- a/buildbot/db/enginestrategy.py
+++ b/buildbot/db/enginestrategy.py
@@ -26,6 +26,7 @@ special cases that Buildbot needs.  Those include:
 import os
 import re
 import sqlalchemy as sa
+import migrate
 
 from buildbot.util import sautils
 from sqlalchemy.engine import strategies
@@ -41,6 +42,21 @@ class ReconnectingListener(object):
     def __init__(self):
         self.retried = False
 
+def get_sqlalchemy_migrate_version():
+    # sqlalchemy-migrate started including a version number in 0.7
+    # Borrowed from model.py
+    version = getattr(migrate, '__version__', 'old')
+    if version == 'old':
+        try:
+            from migrate.versioning import schemadiff
+            if hasattr(schemadiff, 'ColDiff'):
+                version = "0.6.1"
+            else:
+                version = "0.6"
+        except:
+            version = "0.0"
+    return tuple(map(int, version.split('.')))
+
 
 class BuildbotEngineStrategy(strategies.ThreadLocalEngineStrategy):
     # A subclass of the ThreadLocalEngineStrategy that can effectively interact
@@ -175,8 +191,10 @@ class BuildbotEngineStrategy(strategies.ThreadLocalEngineStrategy):
         if version_tup < (0, 6):
             raise RuntimeError("SQLAlchemy version %s is too old" % (version,))
         if version_tup > (0, 7, 10):
-            raise RuntimeError("SQLAlchemy version %s is not supported by "
-                               "SQLAlchemy-Migrate" % (version,))
+            mvt = get_sqlalchemy_migrate_version()
+            if mvt < (0, 8, 0):
+                raise RuntimeError("SQLAlchemy version %s is not supported by "
+                               "SQLAlchemy-Migrate version %d.%d.%d" % (version,mvt[0],mvt[1],mvt[2]))
 
     def create(self, name_or_url, **kwargs):
         if 'basedir' not in kwargs:
